

-------
SYMFONY
-------

INTRO : Qu'est-ce que Symfony ?
ETAPE 1 : Installation du framework Symfony 3.4
ETAPE 2 : Les Bundles
ETAPE 3 : Les routes et les controllers
ETAPE 4 :  Créer notre bundele Boutique
ETAPE 5 : Twig
ETAPE 6 : Les entités
ETAPE 7 : DOCTRINE
ETAPE 8 : Les formulaires
ETAPE 9 : Validation de données
ETAPE 10 : Sécurité et Utilisateur
ETAPE 11 : Les servicess
ETAPE 12 : Les événements
ETAPE 13 : les Assets
ETAPE 14 : Symfony 4



---------------------

INTRO : Qu'est-ce que Symfony ?

1/ Avantages à utiliser un framework du marché ?

	A/ Une organisation Optimisée
	B/ Fonctinnalités  communes
	C/ Services disponible (routing, sécurité, cache,Connexion sécurisée
		à la BDD ...)

2/ Choix du framework !
	A/ Construire son propre Framework 
	B/ -Les framework FullStack (Symfony, Laravel, Zend...)
	   -Les minis frameworck (Silex, Slim, Fat-free, Lumen

3/ Symfony :
	A/ Framework développé par Sensiolab
	B/ Différentes versions :
		-SF3.4 : SF2.8 avec retrait de certaines fonctionnalités 
		dépréciees
		-SF4 : SF3.4 avec retrait de certaines fonctionnalités
		déprécées, et une nouvelle manière de dev', + de liberté dans l'archtecture :
		--> PHP7.1
		--> Flex
		--> Bundle-less

-----------------------------------------------
ETAPE 1 : Installation du framework Symfony 3.4
-----------------------------------------------

Sommaire :

1/ installer Composer
2/ Symfony installer
3/ Installer une application vierge symfony
4/ Arborescence et nature des Dossiers/fichiers
5/ Lancement de notre application
6/ Fonctionnement des URL


1/ installer Composer :


Composer est un outil de gestion de dépendance. 
Il permet d'installer les services (composants/dépendances) 
et de les mettre à jours.
Il est relié à un fichier composer.json.

2/ Installer Symfony Installer

<cmd>php -r "file_put_contents('symfony', file_get_contents('https://symfony.com/installer'));"</cmd>

3/ Installer Une application :

	A. Se diriger vers le dossier
	<cmd>
	cd c://Xampp/htdocs/Symfony

	B. Dans le dossier cible (clic droit +maj > Ouvrir invite de commande)

	Avec Symfony new projet nom_du_projet
	
	Avec Composer :
	<cmd>
	composer create-project symfony/framework-standard-edition project_test

4/ Arborescence et nature des dossiers/fichiers

	le répertoir app/ :
	la configuration de notre application 

	le repertoire bin/
	les exécutables de l'app

	le repertoire src/
	Contient tout le code de notre application. C'est ici que l'on viendra
	codé notre application.

	- Le répertoire tests/:
	Concerne tous les tests de notre application.

	- Le repertoire var/ :
	Concerne tout ce que va écrire symfony durant le processus (cache, les logs)

	- Le repertoire vendor/ :
	Contient tout le code source (le coeur) d'un projet symfony

	le repertoire web/ :
	Contient tout les fichiers destinés aux utilisateurs (img, js, css...)
	Le controller frontal (index.php >> app.php/app_dev.php

	- Le fichier composer.json
	Contient les dépendances. Ce fichier permet de mettre à jour
	l'application et les dépendances. Pour le moment constatons simplement 
	qu'il est bien rempli ...


5/ Lancement de notre application :


A ce stade il y a deux manières de lancer l'application :
	1/ localhost/Symfony/projet_test/web/app.php

	2/ <cmd>
	php bin/console server:run
	localhost:8000 // (permet d'éviter le vertual host)

Les fichiers qui sont lancés sont les suivants:

	web/app.php
	web/app_dev.php (en mode développeur)

TEST :

localhost/symfony/project_test/web/app.php/page_inconnu

localhost/symfony/project_test/web/app_dev.php/page_inconnu

En prod (app.php) on ne voit pas les erreurs, et pour cause, puisque que cette version est
destinée aux internautes. Mais on peut voir les erreurs dans var/logs/prod.log


6/ Fonctionnement des URL:


Nos controller frontaux (app.php et app_dev.php) recoivent
la requête (URL) et demande au Kernel, de charger un controller et une fonction .
Pour chaque fonction on définira une route pour que le Kernel s'y retrouve.

voir le fichier src/AppBundle/Controller/DefaultController.php


----------------------
ETAPE 2 : Les Bundles
----------------------

Somaire :

1/ Le concept des bundles : 
	Sont des Briques de notre application

	ProduitBundle
		-> Crtl/ route : Boutique, categorie, produit ...
	
	MembreBundle :
		-> Ctrl / route : Inscription, Connexion, Profil etc..

	Basebundle :
		-> Ctrl / route : Home, mentions_legales, contact, qui sommes nous


	/!\ mais avec le temps, on estime plus propre de faire :
	AppBundle : Tous les ontrollers  / Toutes les routes.


	Un bundle secompose de : $
	- controller/ :
	Contient les controllers

	DependencyInjection/ :
	Contient les informations sur votre bundle (config)

	-Entity/ :
	Contient les classes (classe modèle, (POPO))

	-Form/ :
	Contient les formulaires (classe qui permettent de conduire nos formulaires)

	-Ressources/ :
		- config/
		Config du bundle (route par exemple en YAML (.yml)...)

		- public/
		Contient les fichiers publiques de votre bundle (css, js, images...)

		-view/ :
		Vues, template de votre bundle.


2/ Création d'un bundle :

	<cmd>
	php bin/console generate:bundle

	- On choisi un nom pour le bundle POLES\TestBundle
	- On nomme le bundle : POLESTestBundle
	- On choisi la destination des dossiers (défault : src/)
	- On choisi le format des config (annotation)

	/!\ On enregistre notre namespace dans composer.json > PSR-4
	/!\ On met à jour l'appliction avec <cmd> composer update

	On lance la home de notre site et nous devrions avoir "Hello World"

	/!\ Attention : Dans cette version, le chemin des vues (dans la fonction render) ne s'écrivent
pas de la meme manière.
	-'POLES:TestBundle:Default:index.html.twig'
	-'@POLESTest/Default/index.html.twig'

----------------------------------------
ETAPE 3 : Les routes et les controllers
----------------------------------------

Sommaire :

1/ On créer des routes
2/ L'objet Request
3/ L'objet Response
4/ Redirection
---------------------

1/ Les routes

	-> '/' (simple rendu de vue)
	-> route '/bonjour' (sans parametre et sans vus
	-> route '/bonjour2' (sans parametre avec une response
	-> route '/hello/{prenom}' (avec paramètre, avec response)
	-> route '/hola/{prenom}' (avec paramètre et vue en twig
	
2/ L'objet requeste HTTP, il ya toujours une requête et une reponse
-L'objet request va stocker toutes les infos de la requete HTTP

USE Symfony\Component\httpFoundation\Request;

$request -> query -> get'param_en_get');
$request -> request -> get'param_en_post');
$request -> cookies -> get'param_en_cookie');
$request -> server -> get'param_du_server');
$request -> attributes -> get'param_d_url');

-> route '/hi/{prenom}' (avec paramètre URL, paramètre GET et vue en twig

Si $request trouve un paramètre qui n'existe pas, il retourne une réponse vide.
if ($request -> isMethode('POST))


Pour vérifier si on récupère du post :

Méthode 1 :

Pour récupèrer des infos dans une session :
$session = $request -> getSession();
$session -> get ('id_membre');
$session -> set ('id_membre', 12);

Méthode 2 :

$request -> session -> get ('id_membre');
$request -> session -> set ('id_membre', 12);

3/ L'objet response

<cmd>
USE Symfony\Component\HttpFoundation\Response;

-> route '/bonjour2' (Test  d'une response)

Toute action va retourner une response. Déjà faire un render(), c'est utiliser l'objet Response

$this -> render()
$this -> getTemplating() -> renderResponse()

 4/ Redirection
<cmd>
USE Symfony\Component\HttpFoundation\RedirectResponse;
-> route '/redirect' (redirige vers une autre route)
-A ce stade nous devons utiliser un nom pour nos routes
exemple : @Route("/bonjour", name="bonjour2")


5/ message

La variable app (index4.html.twig) est une variable clobale, qui contient des informations 
générales sur l'app.
	(ex : app.session; app.user)


----------------------------------------
ETAPE 4 :  Créer notre bundele Boutique
----------------------------------------

Créer un nouveau projet symfony boutique3
lancer le projet 
Créer un bundle BoutiqueBundle (sans namespace) à la première question répondez : N










