
---------
SYMFONY : 
---------

INTRO : Qu'est-ce que Symfony ? 
ETAPE 1 : Installation de du framework Symfony 3.4
ETAPE 2 : Les Bundles
ETAPE 3 : Les routes et les controllers
ETAPE 4 : Créer notre Bundle Boutique
ETAPE 5 : Twig 
ETAPE 6 : Les entités
ETAPE 7 : DOCTRINE
ETAPE 8 : Les formulaires
ETAPE 9 : Validation des données
ETAPE 10 : Sécurité et Utilisateur
ETAPE 11 : Les services
ETAPE 12 : Les évènements
ETAPE 13 : Les Assets 
ETAPE 14 : Symfony 4

-----------------------------

INTRO : Qu'est-ce que Symfony ? 

1/ Avantages à utiliser un Framework du marché ? 
	A/ Une organisation Optimisée
	B/ Fonctionnalités communes
	C/ Services diponibles (routing, sécurité, cache, Connexion sécurisée à la BDD...)
	
2/ Choix du framework ! 
	A/ Construire son propre Framework
	B/ - Les framework FullStack (symfony, laravel, zend...)
	   - Les minis framework (Silex, Slim, fat-Free, Lumen)
	 	
3/ Symfony : 
	A/ Frameword développé par Sensiolab
	B/ Différentes versions : 
		- SF3.4 : SF2.8 avec retrait de certaines fonctionnalités dépréciées
		- SF4 : SF3.4 avec retrait de certaines fonctionnalités dépréciées, et une nouvelle manière de dev', + de liberté dans l'architecture : 
			--> PHP7.1
			--> Flex
			--> Bundle-less
			
--------------------------------------------------			
ETAPE 1 : Installation de du framework Symfony 3.4
--------------------------------------------------
Sommaire : 
1/ installer Composer
2/ Symfony installer
3/ Installer une application vierge symfony
4/ Arborescence et nature des Dossiers/fichiers
5/ Lancement de notre application
6/ Fonctionnement des URL

//----------------
1/ installer Composer
Composer est un outils de gestion de dépendance. Il permet d'installer les services (composants/dépendances) et de les mettre à jours. 
Il est relié à un fichier composer.json. 

2/ Installer Symfony Installer

<cmd>
php -r "file_put_contents('symfony', file_get_contents('https://symfony.com/installer'));"


3/ Installer Une application : 

	A. se diriger vers le dossier
	<cmd>
	cd c://Xampp/htdocs/Symfony
	
	B. dans le dossier cicble (clic droit + Maj > Ouvrir invite de commande)

	
	|Avec Symfony Installer : 
	|	<cmd>
	|	symfony new project nom_du_projet
		
	Avec Composer : 	
		<cmd>
		composer create-project symfony/framework-standard-edition projet_test

4/ Arborescence et nature des Dossiers/fichiers

	- Le répertoire app/ :
	La configuration de notre application
	
	- Le repertoire bin/ :
	Les exécutables de l'app 
	
	- Le repertoire src/ :
	Contient tout le code de notre application. C'est ici que l'on viendra codé notre application. 
	
	- Le repertoire tests/ :
	Concerne tous les test de notre application. 
	
	- Le repertoire var/ :
	Concerne tout ce que va écrire symfony durant le processus (cache, les logs)
	
	- Le repertoire vendor/ : 
	Contient tout le code source (le coeur) d'un projet symfony. 
	
	- Le repertoire web/ :
	Contient tous les fichiers destinés aux utilisateurs (img, js, css...). Le controller frontal (index.php >> app.php/app_dev.php)
	
	- Le fichier composer.json
	Contient les dépendances. Ce fichier permet de mettre à jour l'application et les dépendances. Pour le moment constatons simplement qu'il est bien rempli...
	
	
5/ Lancement de notre application

A ce stade il y a deux manières de lancer l'application : 
		
		1/ localhost/Symfony/projet_test/web/app.php
		
		2/ <cmd>
		php bin/console server:run
		localhost:8000
		(permet d'éviter le virtual host)
	
	
Les fichiers qui sont lancés sont les suivants: 
	web/app.php
	web/app_dev.php (en mode développeur)
	
	
	test : 
	localhost/Symfony/projet_test/web/app.php/page_inconnu
	localhost/Symfony/projet_test/web/app_dev.php/page_inconnu

	En prod (app.php) on ne voit pas les erreurs, et pour cause, puisque que cette version est destinée aux internautes. Mais on peut voir les erreurs dans var/logs/prod.log
	
	
6/ Fonctionnement des URL

 Nos controllers frontaux (app.php et app_dev.php) reçoivent la requête (URL) et demande au Kernel, de charger un controller et une fonction. Pour chaque fonction on définira une route pour que le Kernel s'y retrouve. 
 
 voir le fichier src/AppBundle/Controller/DefaultController.php
 
-----------------------
ETAPE 2 : Les Bundles	
-----------------------
Sommaire : 

1/ Le concept des bundles
2/ Création d'un bundle
-----------

1/ Le concept des bundles : 
	
	Briques de notre application
	
	ProduitBundle :  
		-> Crtl / route : boutique, categorie, produit etc...
	MembreBundle : 
		-> Ctrl / route : Inscription, connexion, profil etc...
	BaseBundle : 
		-> Ctrl / Route : Home, mentions_legales, contact, qui sommes nous
	
	
	/!\ mais avec le temps, on estime plus propre de faire : 
	AppBundle : Tous les controllers / toutes les routes.
	
	
	Un bundle se compose de : $
		- controller/ : 
		Contient les controller
		
		-DependencyInjection/ :
		Contient les informations sur votre bundle (config)
		
		- Entity/ : 
		Contient les classes (classe modèle, (POPO))
		
		- Form/ :
		Contient les formulaires (classes qui permettent de contruire nos formulaires)
		
		- Ressources/
			- config/
			Config du bundle (route par exemple en YAML (.yml)...)
		
			- public/
			contient les fichiers publiques de votre bundle (css, js, images...)

			- view/
			Vues, template de votre bundle. 
			
2/ Création d'un bundle : 

	<cmd>
	php bin/console generate:bundle
	
	- On choisi un nom pour le bundle POLES\TestBundle 
	- On nomme le bundle : POLESTestBundle
	- On choisi la destination des dossiers (défault : src/)
	- On choisi le format des config (annotation)
	
	/!\ ON enregistre notre namespace dans composer.json > PSR-4
	/!\ On met à jour l'application avec <cmd> composer update
	
	On lance la home de notre site et nous devrions avoir "hellor World"
	
	/!\ Attention :  Dans cette version, le chemin des vues (dans la fonction render) ne s'écrivent pas de la même manière. 
		- 'POLES:TestBundle:Default:index.html.twig'
		- '@POLESTest/Default/index.html.twig'
	

--------------
Resumer
------------

PS C:\xampp\htdocs\Symfony> composer create-project symfony/framework-standard-edition boutique_3

database_host (127.0.0.1):
database_port (null):
database_name (symfony):
database_user (root):
database_password (null):
mailer_transport (smtp):
mailer_host (127.0.0.1):
mailer_user (null):
mailer_password (null):

Are you planning on sharing this bundle across multiple applications? [no]: n

Your application code must be written in bundles. This command helps
you generate them easily.

Give your bundle a descriptive name, like BlogBundle.
Bundle name: BoutiqueBundle

Bundles are usually generated into the src/ directory. Unless you're
doing something custom, hit enter to keep this default!

Target Directory [src/]:

What format do you want to use for your generated configuration?

Configuration format (annotation, yml, xml, php) [annotation]: annotation



---------------------------------------
ETAPE 3 : Les routes et les controllers	
---------------------------------------
Sommaire : 

1/ on créer des routes
2/ L'objet Request
3/ L'objet Response
4/ Redirection
--------------

1/ les routes

-> route '/' (simple rendu de vue)
-> route '/bonjour' (sans parametre et sans vue)
-> route '/bonjour2' (sans parametre avec une response)
-> route '/hello/{prenom}' (avec paramètre, avec response)
-> route '/hola/{prenom}' (avec paramètre et vue en twig

2/ L'objet request
 
- Dans une requete HTTP, il y a toujours une requête et une reponse
- L'objet request va stocker toutes les infos de la requete HTTP

USE Symfony\Component\HttpFoundation\Request;

$request -> query -> get('param_en_get');
$request -> request -> get('param_en_post');
$request -> cookies -> get('param_en_cookie');
$request -> server -> get('param_du_serveur');
$request -> attributes -> get('param_d-url');

 -> route'/hi/{prenom}'  (avec paramètre URL, paramètre GET et vue en Twig
 

Si $request trouve un paramètre qui n'existe pas, il retourne une réponse vide. 

Pour vérifier si on récupère du post : 
if($request -> isMethod('POST'))

Pour récupérer/affecter des infos dans une session : 

Méthode 1 :
$session = $request -> getSession();
$session -> get('id_membre');
$session -> set('id_membre', 12);

Méthode 2 :
$request -> session -> get('id_membre');
$request -> session -> set('id_membre', 12);


3/ L'objet response

<code>
USE Symfony\Component\HttpFoundation\Response;

-> route '/bonjour2' (Test d'une response)

Toute action va retourner une response. Déjà faire un render(), c'est utiliser l'objet Response

$this -> render() 
$this -> getTemplating() -> renderResponse()


4/ Redirection

<code>
USE Symfony\Component\HttpFoundation\RedirectResponse;

-> route '/redirect' (redirige vers une autre route)
- A ce stade nous devons utiliser un nom pour nos routes
exemple : @Route("/bonjour2", name="bonjour2")



5/ message

La variable app (index4.html.twig) est une variable globale, qui contient des infos générales sur l'app. 
	(ex : app.session; app.user)



			
------------------------------------
Etape 4 : Création de notre boutique
------------------------------------

1/ Créer un nouveau projet Symfony (Boutique_3)
2/ Créer et enregistrer le bundle BoutiqueBundle
3/ Update de l'app
4/ Réorganisation du bundle
5/ Création des premières routes.
-------------

1/ Créer un nouveau projet Symfony (Boutique_3) (cf ETAPE 1)

2/ Créer et enregistrer le bundle BoutiqueBundle
	-> <cmd>
		php bin/console generate:bundle
			-> N
			-> BoutiqueBundle
			-> src/
			-> annotation
	composer.json
		<cmd>
			"psr-4": {
					"AppBundle\\": "src/AppBundle,
					"BoutiqueBundle\\": "src/BoutiqueBundle,
				 },


3/ Update de l'app
	-> <cmd>
		composer update

4/ Réorganisation du bundle
	-> renommer DefaultControler en ProduitController (fichier, classe ...)
	-> Dans les vues, on a ajouter les dossiers Produit, Membre, Commande

5/ Création des premières routes
	 @Route("/", name="accueil") : Accueil de notre site -> index.html.twig
	 @Rout("/categorie/{categorie}", name="categorie") : Page de catégorie ->  index.html.twig
	 @Route("/produit/{id}", name="produit") : Page de produit -> produit.html.twig

A ce stade nous avons des erreurs car les vues n'existe pas. Nous allons les créers au chapitre suivant.

L'échange avec la BDD, se faisant avec Doctrine (outil vaste), on simule de data avec des array $produits et $categories.

-----------
ETAPE 5 :
----------
Sommaire :

1/ créer un layout
2/ L'héritage Twig
3/ Modification de nos vues
4/Documentation de TWIG
----------------------











Créer un nouveau projet symfony boutique3
Lancer le projet
Crer un bundle BoutiqueBundle (sans namespace) a la premiere question : N


		
	
	



    